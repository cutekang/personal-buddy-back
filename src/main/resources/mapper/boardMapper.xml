<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.personalbuddyback.mapper.BoardMapper">

<!--  Board List  -->
<!--    게시글 전체 목록 -->
    <select id="selectBoardList" resultType="BoardListViewDTO" >
        SELECT ID, BOARD_TITLE, BOARD_CONTENT_CREATE_DATE, BOARD_CONTENT_VIEWS, BOARD_HASHTAG,
               MEMBER_NICKNAME, MEMBER_IMG_NAME, MEMBER_IMG_PATH,
               BOARD_COMMENT_COUNT, BOARD_LIKE_COUNT, BOARD_THUMBNAIL_URL
        FROM VW_BOARD_LIST
        ORDER BY BOARD_CONTENT_CREATE_DATE DESC
    </select>

<!--    HOT게시글(좋아요 수 많은 10개만)-->
    <select id="selectHotBoardList" resultType="BoardListViewDTO">
        SELECT ID, BOARD_TITLE, BOARD_CONTENT_CREATE_DATE, BOARD_CONTENT_VIEWS, BOARD_HASHTAG,
               MEMBER_NICKNAME, MEMBER_IMG_NAME, MEMBER_IMG_PATH,
               BOARD_COMMENT_COUNT, BOARD_LIKE_COUNT, BOARD_THUMBNAIL_URL
        FROM VW_BOARD_LIST
        ORDER BY BOARD_LIKE_COUNT DESC
        FETCH FIRST 10 ROWS ONLY
    </select>

<!--    게시글 검색 + 정렬 + 해시태그 필터링 -->
    <select id="selectBoardListBySearch" parameterType="map" resultType="BoardListViewDTO">
        SELECT ID, BOARD_TITLE, BOARD_CONTENT_CREATE_DATE, BOARD_CONTENT_VIEWS, BOARD_HASHTAG,
        MEMBER_NICKNAME, MEMBER_IMG_NAME, MEMBER_IMG_PATH,
        BOARD_COMMENT_COUNT, BOARD_LIKE_COUNT, BOARD_THUMBNAIL_URL
        FROM VW_BOARD_LIST
        WHERE 1=1
        <if test="keywords != null and !keywords.isEmpty()"> <!-- 키워드 검색 -->
            AND (
            <foreach item="keyword" collection="keywords" separator="OR">
                BOARD_TITLE LIKE '%' || #{keyword} || '%'
            </foreach>
            )
        </if>
        <if test="hashtags != null and !hashtags.isEmpty()"> <!-- 해시태그 필터링 -->
            AND BOARD_HASHTAG IN
            <foreach item="tag" collection="hashtags" open="(" separator="," close=")">
                #{tag}
            </foreach>
        </if>
        <choose>
            <when test="sort == 'recent'"> <!-- 정렬 조건 -->
                ORDER BY BOARD_CONTENT_CREATE_DATE DESC
            </when>
            <when test="sort == 'like'">
                ORDER BY BOARD_LIKE_COUNT DESC
            </when>
            <otherwise>
                ORDER BY BOARD_CONTENT_CREATE_DATE DESC
            </otherwise>
        </choose>
    </select>

<!--    Board Post  -->
<!--    게시글 상세 조회 -->
    <select id="selectBoardById" parameterType="Long" resultType="BoardViewDTO">
        SELECT ID, BOARD_TITLE, BOARD_CONTENT, BOARD_CONTENT_CREATE_DATE, BOARD_CONTENT_UPDATE_DATE,
               BOARD_CONTENT_VIEWS, BOARD_HASHTAG,
               MEMBER_NICKNAME, MEMBER_IMG_NAME, MEMBER_IMG_PATH,
               BOARD_COMMENT_COUNT, BOARD_LIKE_COUNT, BOARD_THUMBNAIL_URL
        FROM VW_BOARD_LIST
        WHERE ID = #{id}
    </select>

<!--    게시글 작성-->
    <insert id="insertBoard" parameterType="BoardVO">
        INSERT INTO TBL_BOARD ( ID, BOARD_TITLE, BOARD_CONTENT, BOARD_CONTENT_VIEWS, BOARD_CONTENT_CREATE_DATE,
                                BOARD_CONTENT_UPDATE_DATE, BOARD_HASHTAG,MEMBER_ID
        ) VALUES ( SEQ_BOARD.NEXTVAL, #{boardTitle}, #{boardContent}, 0, SYSDATE,
                  SYSDATE, #{boardHashtag}, #{memberId}
        )
    </insert>

<!--    게시글 이미지 등록 -->
    <insert id="insertBoardImage" parameterType="BoardImgVO">
        INSERT INTO TBL_BOARD_IMG (ID, BOARD_IMG_PATH, BOARD_IMG_NAME, BOARD_ID
        ) VALUES ( SEQ_BOARD_IMG.NEXTVAL, #{boardImgPath}, #{boardImgName}, #{boardId}
        )
    </insert>

<!--    게시글 수정 -->
    <update id="updateBoard" parameterType="BoardVO">
        UPDATE TBL_BOARD
        SET
            BOARD_TITLE = #{boardTitle},
            BOARD_CONTENT = #{boardContent},
            BOARD_HASHTAG = #{boardHashtag},
            BOARD_CONTENT_UPDATE_DATE = SYSDATE
        WHERE
            ID = #{id}
    </update>

<!--    게시글 이미지 삭제(전체)-->
    <delete id="deleteBoardImages" parameterType="Long">
        DELETE FROM TBL_BOARD_IMG
        WHERE BOARD_ID = #{boardId}
    </delete>

<!--    특정 이미지 1개 삭제 -->
    <delete id="deleteBoardImageById" parameterType="Long">
        DELETE FROM TBL_BOARD_IMG
        WHERE ID = #{id}
    </delete>

<!--    게시글 삭제-->
    <delete id="deleteBoard" parameterType="Long">
        DELETE
        FROM TBL_BOARD
        WHERE ID = #{id}
    </delete>

<!--    게시글 조회수 1 증가-->
    <update id="updateBoardViews" parameterType="Long">
        UPDATE TBL_BOARD
        SET BOARD_CONTENT_VIEWS = BOARD_CONTENT_VIEWS + 1
        WHERE ID = #{id}
    </update>

<!--    게시글 좋아요 추가-->
    <insert id="insertBoardLike" parameterType="BoardLikeVO">
        INSERT INTO TBL_BOARD_LIKE (ID, BOARD_LIKE_CREATE_DATE, MEMBER_ID, BOARD_ID
        ) VALUES (
            SEQ_BOARD_LIKE.NEXTVAL, SYSDATE, #{memberId}, #{boardId}
        )
    </insert>

<!--    게시글 좋아요 취소-->
    <delete id="deleteBoardLike" parameterType="BoardLikeVO">
        DELETE
        FROM TBL_BOARD_LIKE
        WHERE MEMBER_ID = #{memberId}
            AND BOARD_ID = #{boardId}
    </delete>

<!--    게시글 좋아요 여부 조회-->
    <select id="checkBoardLike" parameterType="BoardLikeVO" resultType="_int">
        SELECT COUNT(ID)
        FROM TBL_BOARD_LIKE
        WHERE MEMBER_ID = #{memberId}
            AND BOARD_ID = #{boardId}
    </select>

<!--    Board Comment  -->
<!--    게시글 댓글 전체 목록-->
    <select id="selectBoardCommentsByBoardId" parameterType="map" resultType="BoardCommentViewDTO">
        SELECT TBC.ID, TBC.BOARD_COMMENT_CONTENT, TBC.BOARD_COMMENT_CREATE_DATE,
        TBM.MEMBER_NICKNAME, TBM.MEMBER_IMG_NAME, TBM.MEMBER_IMG_PATH,
        (SELECT COUNT(ID)
        FROM TBL_BOARD_COMMENT_LIKE
        WHERE BOARD_COMMENT_ID = TBC.ID
        ) AS BOARD_COMMENT_LIKE_COUNT
        FROM TBL_BOARD_COMMENT TBC
        JOIN TBL_MEMBER TBM ON TBC.MEMBER_ID = TBM.ID
        WHERE TBC.BOARD_ID = #{boardId}
        <choose>
            <when test="sort == 'like'">
                ORDER BY BOARD_COMMENT_LIKE_COUNT DESC
            </when>
            <otherwise>
                ORDER BY TBC.BOARD_COMMENT_CREATE_DATE DESC
            </otherwise>
        </choose>
    </select>

<!--    댓글 작성-->
    <insert id="insertBoardComment" parameterType="BoardCommentVO">
        INSERT INTO TBL_BOARD_COMMENT (
            ID, BOARD_COMMENT_CONTENT, BOARD_COMMENT_CREATE_DATE, MEMBER_ID, BOARD_ID
        ) VALUES (
             SEQ_BOARD_COMMENT.NEXTVAL, #{boardCommentContent}, SYSDATE, #{memberId}, #{boardId}
        )
    </insert>

<!--    댓글 수정-->
    <update id="updateBoardComment" parameterType="BoardCommentVO">
        UPDATE TBL_BOARD_COMMENT
        SET BOARD_COMMENT_CONTENT = #{boardCommentContent}
        WHERE ID = #{id}
    </update>

<!--    댓글 삭제-->
    <delete id="deleteBoardComment" parameterType="Long">
        DELETE
        FROM TBL_BOARD_COMMENT
        WHERE ID = #{id}
    </delete>

<!--    댓글 좋아요-->
    <insert id="insertBoardCommentLike" parameterType="BoardCommentLikeVO">
        INSERT INTO TBL_BOARD_COMMENT_LIKE(
            ID, BOARD_COMMENT_LIKE_CREATE_DATE, MEMBER_ID, BOARD_COMMENT_ID
        ) VALUES (
            SEQ_BOARD_COMMENT_LIKE.NEXTVAL, SYSDATE, #{memberId}, #{boardCommentId}
        )
    </insert>

<!--    댓글 좋아요 취소-->
    <delete id="deleteBoardCommentLike" parameterType="BoardCommentLikeVO">
        DELETE
        FROM TBL_BOARD_COMMENT_LIKE
        WHERE MEMBER_ID = #{memberId}
            AND BOARD_COMMENT_ID = #{boardCommentId}
    </delete>

<!--    댓글 좋아요 여부-->
    <select id="checkBoardCommentLike" parameterType="BoardCommentLikeVO" resultType="_int">
        SELECT COUNT(ID)
        FROM TBL_BOARD_COMMENT_LIKE
        WHERE MEMBER_ID = #{memberId}
            AND BOARD_COMMENT_ID = #{boardCommentId}
    </select>
</mapper>